// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AcceptInitParameters struct {

	// List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	// List of network ids from which connections can be accepted.
	Networks []*string `json:"networks,omitempty" tf:"networks,omitempty"`
}

type AcceptObservation struct {

	// List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	// List of network ids from which connections can be accepted.
	Networks []*string `json:"networks,omitempty" tf:"networks,omitempty"`
}

type AcceptParameters struct {

	// List of environments ids from which connections can be accepted. All networks within the list of environment will be allowed.
	// +kubebuilder:validation:Optional
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	// List of network ids from which connections can be accepted.
	// +kubebuilder:validation:Optional
	Networks []*string `json:"networks,omitempty" tf:"networks,omitempty"`
}

type NetwrorkLinkServiceEnvironmentInitParameters struct {
}

type NetwrorkLinkServiceEnvironmentObservation struct {

	// The ID of the Environment that the Network Link Service belongs to, for example, env-abc123.
	// The unique identifier for the environment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetwrorkLinkServiceEnvironmentParameters struct {

	// The ID of the Environment that the Network Link Service belongs to, for example, env-abc123.
	// The unique identifier for the environment.
	// +crossplane:generate:reference:type=github.com/stakater/provider-confluent/apis/confluent/v1alpha1.Environment
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Environment in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Environment in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type NetwrorkLinkServiceInitParameters struct {

	// supports the following:
	Accept []AcceptInitParameters `json:"accept,omitempty" tf:"accept,omitempty"`

	// The description of the Network Link Service.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Network Link Service.
	// The display name of the Network Link Service.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment []NetwrorkLinkServiceEnvironmentInitParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// supports the following:
	// Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider accounts.
	Network []NetwrorkLinkServiceNetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`
}

type NetwrorkLinkServiceNetworkInitParameters struct {
}

type NetwrorkLinkServiceNetworkObservation struct {

	// The ID of the Environment that the Network Link Service belongs to, for example, env-abc123.
	// The unique identifier for the network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetwrorkLinkServiceNetworkParameters struct {

	// The ID of the Environment that the Network Link Service belongs to, for example, env-abc123.
	// The unique identifier for the network.
	// +crossplane:generate:reference:type=github.com/stakater/provider-confluent/apis/confluent/v1alpha1.Network
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Network in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Network in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type NetwrorkLinkServiceObservation struct {

	// supports the following:
	Accept []AcceptObservation `json:"accept,omitempty" tf:"accept,omitempty"`

	// The description of the Network Link Service.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Network Link Service.
	// The display name of the Network Link Service.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment []NetwrorkLinkServiceEnvironmentObservation `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the Environment that the Network Link Service belongs to, for example, env-abc123.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// supports the following:
	// Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider accounts.
	Network []NetwrorkLinkServiceNetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// The Confluent Resource Name of the Network Link Service.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`
}

type NetwrorkLinkServiceParameters struct {

	// supports the following:
	// +kubebuilder:validation:Optional
	Accept []AcceptParameters `json:"accept,omitempty" tf:"accept,omitempty"`

	// The description of the Network Link Service.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Network Link Service.
	// The display name of the Network Link Service.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	// +kubebuilder:validation:Optional
	Environment []NetwrorkLinkServiceEnvironmentParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// supports the following:
	// Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider accounts.
	// +kubebuilder:validation:Optional
	Network []NetwrorkLinkServiceNetworkParameters `json:"network,omitempty" tf:"network,omitempty"`
}

// NetwrorkLinkServiceSpec defines the desired state of NetwrorkLinkService
type NetwrorkLinkServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetwrorkLinkServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetwrorkLinkServiceInitParameters `json:"initProvider,omitempty"`
}

// NetwrorkLinkServiceStatus defines the observed state of NetwrorkLinkService.
type NetwrorkLinkServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetwrorkLinkServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetwrorkLinkService is the Schema for the NetwrorkLinkServices API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,confluent}
type NetwrorkLinkService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environment) || (has(self.initProvider) && has(self.initProvider.environment))",message="spec.forProvider.environment is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.network) || (has(self.initProvider) && has(self.initProvider.network))",message="spec.forProvider.network is a required parameter"
	Spec   NetwrorkLinkServiceSpec   `json:"spec"`
	Status NetwrorkLinkServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetwrorkLinkServiceList contains a list of NetwrorkLinkServices
type NetwrorkLinkServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetwrorkLinkService `json:"items"`
}

// Repository type metadata.
var (
	NetwrorkLinkService_Kind             = "NetwrorkLinkService"
	NetwrorkLinkService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetwrorkLinkService_Kind}.String()
	NetwrorkLinkService_KindAPIVersion   = NetwrorkLinkService_Kind + "." + CRDGroupVersion.String()
	NetwrorkLinkService_GroupVersionKind = CRDGroupVersion.WithKind(NetwrorkLinkService_Kind)
)

func init() {
	SchemeBuilder.Register(&NetwrorkLinkService{}, &NetwrorkLinkServiceList{})
}
