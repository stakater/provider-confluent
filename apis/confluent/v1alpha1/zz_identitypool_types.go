// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IdentityPoolInitParameters struct {

	// A description for the Identity Pool.
	// A description of the Identity Pool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A human-readable name for the Identity Pool.
	// A name for the Identity Pool.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// A filter expression in Supported Common Expression Language (CEL) that specifies which identities can authenticate using your identity pool (see Set identity pool filters for more details).
	// A filter expression that must be evaluated to be true to use this identity pool.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see Registered Claim Names for more details). This appears in the audit log records, showing, for example, that "identity Z used identity pool X to access topic A".
	// A JWT claim to extract the authenticating principal to Confluent resources.
	IdentityClaim *string `json:"identityClaim,omitempty" tf:"identity_claim,omitempty"`

	// supports the following:
	// Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.
	IdentityProvider []IdentityProviderInitParameters `json:"identityProvider,omitempty" tf:"identity_provider,omitempty"`
}

type IdentityPoolObservation struct {

	// A description for the Identity Pool.
	// A description of the Identity Pool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A human-readable name for the Identity Pool.
	// A name for the Identity Pool.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// A filter expression in Supported Common Expression Language (CEL) that specifies which identities can authenticate using your identity pool (see Set identity pool filters for more details).
	// A filter expression that must be evaluated to be true to use this identity pool.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// The ID of the Identity Provider associated with the Identity Pool, for example, op-abc123.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see Registered Claim Names for more details). This appears in the audit log records, showing, for example, that "identity Z used identity pool X to access topic A".
	// A JWT claim to extract the authenticating principal to Confluent resources.
	IdentityClaim *string `json:"identityClaim,omitempty" tf:"identity_claim,omitempty"`

	// supports the following:
	// Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.
	IdentityProvider []IdentityProviderObservation `json:"identityProvider,omitempty" tf:"identity_provider,omitempty"`
}

type IdentityPoolParameters struct {

	// A description for the Identity Pool.
	// A description of the Identity Pool.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A human-readable name for the Identity Pool.
	// A name for the Identity Pool.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// A filter expression in Supported Common Expression Language (CEL) that specifies which identities can authenticate using your identity pool (see Set identity pool filters for more details).
	// A filter expression that must be evaluated to be true to use this identity pool.
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from (see Registered Claim Names for more details). This appears in the audit log records, showing, for example, that "identity Z used identity pool X to access topic A".
	// A JWT claim to extract the authenticating principal to Confluent resources.
	// +kubebuilder:validation:Optional
	IdentityClaim *string `json:"identityClaim,omitempty" tf:"identity_claim,omitempty"`

	// supports the following:
	// Identity Provider objects represent external OAuth/OpenID Connect providers within Confluent Cloud.
	// +kubebuilder:validation:Optional
	IdentityProvider []IdentityProviderParameters `json:"identityProvider,omitempty" tf:"identity_provider,omitempty"`
}

type IdentityProviderInitParameters struct {
}

type IdentityProviderObservation struct {

	// The ID of the Identity Provider associated with the Identity Pool, for example, op-abc123.
	// The unique identifier for the Identity Provider.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IdentityProviderParameters struct {

	// The ID of the Identity Provider associated with the Identity Pool, for example, op-abc123.
	// The unique identifier for the Identity Provider.
	// +crossplane:generate:reference:type=github.com/stakater/provider-confluent/apis/confluent/v1alpha1.IdentityProvider
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a IdentityProvider in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a IdentityProvider in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

// IdentityPoolSpec defines the desired state of IdentityPool
type IdentityPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IdentityPoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IdentityPoolInitParameters `json:"initProvider,omitempty"`
}

// IdentityPoolStatus defines the observed state of IdentityPool.
type IdentityPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IdentityPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityPool is the Schema for the IdentityPools API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,confluent}
type IdentityPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filter) || (has(self.initProvider) && has(self.initProvider.filter))",message="spec.forProvider.filter is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.identityClaim) || (has(self.initProvider) && has(self.initProvider.identityClaim))",message="spec.forProvider.identityClaim is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.identityProvider) || (has(self.initProvider) && has(self.initProvider.identityProvider))",message="spec.forProvider.identityProvider is a required parameter"
	Spec   IdentityPoolSpec   `json:"spec"`
	Status IdentityPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityPoolList contains a list of IdentityPools
type IdentityPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityPool `json:"items"`
}

// Repository type metadata.
var (
	IdentityPool_Kind             = "IdentityPool"
	IdentityPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IdentityPool_Kind}.String()
	IdentityPool_KindAPIVersion   = IdentityPool_Kind + "." + CRDGroupVersion.String()
	IdentityPool_GroupVersionKind = CRDGroupVersion.WithKind(IdentityPool_Kind)
)

func init() {
	SchemeBuilder.Register(&IdentityPool{}, &IdentityPoolList{})
}
