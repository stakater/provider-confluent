// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkLinkEndpointEnvironmentInitParameters struct {
}

type NetworkLinkEndpointEnvironmentObservation struct {

	// The ID of the Network that the Network Link Endpoint belongs to, for example, n-abc123.
	// The unique identifier for the environment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkLinkEndpointEnvironmentParameters struct {

	// The ID of the Network that the Network Link Endpoint belongs to, for example, n-abc123.
	// The unique identifier for the environment.
	// +crossplane:generate:reference:type=github.com/stakater/provider-confluent/apis/confluent/v1alpha1.Environment
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Environment in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Environment in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type NetworkLinkEndpointInitParameters struct {

	// The description of the Network Link Endpoint.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Network Link Endpoint.
	// The display name of the Network Link Endpoint.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment []NetworkLinkEndpointEnvironmentInitParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// supports the following:
	// Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider accounts.
	Network []NetworkLinkEndpointNetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// supports the following:
	NetworkLinkService []NetworkLinkServiceInitParameters `json:"networkLinkService,omitempty" tf:"network_link_service,omitempty"`
}

type NetworkLinkEndpointNetworkInitParameters struct {
}

type NetworkLinkEndpointNetworkObservation struct {

	// The ID of the Network that the Network Link Endpoint belongs to, for example, n-abc123.
	// The unique identifier for the network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkLinkEndpointNetworkParameters struct {

	// The ID of the Network that the Network Link Endpoint belongs to, for example, n-abc123.
	// The unique identifier for the network.
	// +crossplane:generate:reference:type=github.com/stakater/provider-confluent/apis/confluent/v1alpha1.Network
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Network in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Network in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type NetworkLinkEndpointObservation struct {

	// The description of the Network Link Endpoint.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Network Link Endpoint.
	// The display name of the Network Link Endpoint.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment []NetworkLinkEndpointEnvironmentObservation `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the Network that the Network Link Endpoint belongs to, for example, n-abc123.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// supports the following:
	// Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider accounts.
	Network []NetworkLinkEndpointNetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// supports the following:
	NetworkLinkService []NetworkLinkServiceObservation `json:"networkLinkService,omitempty" tf:"network_link_service,omitempty"`

	// The Confluent Resource Name of the Network Link Endpoint.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`
}

type NetworkLinkEndpointParameters struct {

	// The description of the Network Link Endpoint.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Network Link Endpoint.
	// The display name of the Network Link Endpoint.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	// +kubebuilder:validation:Optional
	Environment []NetworkLinkEndpointEnvironmentParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// supports the following:
	// Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider accounts.
	// +kubebuilder:validation:Optional
	Network []NetworkLinkEndpointNetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// supports the following:
	// +kubebuilder:validation:Optional
	NetworkLinkService []NetworkLinkServiceParameters `json:"networkLinkService,omitempty" tf:"network_link_service,omitempty"`
}

type NetworkLinkServiceInitParameters struct {

	// The ID of the Network that the Network Link Endpoint belongs to, for example, n-abc123.
	// The unique identifier for the Network Link Endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkLinkServiceObservation struct {

	// The ID of the Network that the Network Link Endpoint belongs to, for example, n-abc123.
	// The unique identifier for the Network Link Endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkLinkServiceParameters struct {

	// The ID of the Network that the Network Link Endpoint belongs to, for example, n-abc123.
	// The unique identifier for the Network Link Endpoint.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

// NetworkLinkEndpointSpec defines the desired state of NetworkLinkEndpoint
type NetworkLinkEndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkLinkEndpointParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkLinkEndpointInitParameters `json:"initProvider,omitempty"`
}

// NetworkLinkEndpointStatus defines the observed state of NetworkLinkEndpoint.
type NetworkLinkEndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkLinkEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkLinkEndpoint is the Schema for the NetworkLinkEndpoints API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,confluent}
type NetworkLinkEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environment) || (has(self.initProvider) && has(self.initProvider.environment))",message="spec.forProvider.environment is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.network) || (has(self.initProvider) && has(self.initProvider.network))",message="spec.forProvider.network is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkLinkService) || (has(self.initProvider) && has(self.initProvider.networkLinkService))",message="spec.forProvider.networkLinkService is a required parameter"
	Spec   NetworkLinkEndpointSpec   `json:"spec"`
	Status NetworkLinkEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkLinkEndpointList contains a list of NetworkLinkEndpoints
type NetworkLinkEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkLinkEndpoint `json:"items"`
}

// Repository type metadata.
var (
	NetworkLinkEndpoint_Kind             = "NetworkLinkEndpoint"
	NetworkLinkEndpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkLinkEndpoint_Kind}.String()
	NetworkLinkEndpoint_KindAPIVersion   = NetworkLinkEndpoint_Kind + "." + CRDGroupVersion.String()
	NetworkLinkEndpoint_GroupVersionKind = CRDGroupVersion.WithKind(NetworkLinkEndpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkLinkEndpoint{}, &NetworkLinkEndpointList{})
}
