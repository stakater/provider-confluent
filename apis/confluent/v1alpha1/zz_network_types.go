// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsInitParameters struct {
}

type AwsObservation struct {

	// The AWS account ID associated with the Confluent Cloud VPC.
	// The AWS account ID associated with the Confluent Cloud VPC.
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
	// The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
	PrivateLinkEndpointService *string `json:"privateLinkEndpointService,omitempty" tf:"private_link_endpoint_service,omitempty"`

	// The Confluent Cloud VPC ID.
	// The Confluent Cloud VPC ID.
	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type AwsParameters struct {
}

type AzureInitParameters struct {
}

type AzureObservation struct {

	// The mapping of zones to Private Link Service Aliases if available. Keys are zone names, for example, 1 and values are Azure Private Link Service Aliases, for example, s-nk99e-privatelink-1.8c43dcd0-695c-1234-bc35-11fe6abb303a.centralus.azure.privatelinkservice.
	PrivateLinkServiceAliases map[string]*string `json:"privateLinkServiceAliases,omitempty" tf:"private_link_service_aliases,omitempty"`
}

type AzureParameters struct {
}

type DNSConfigInitParameters struct {

	// Network DNS resolution.
	// When resolution is CHASED_PRIVATE, clusters in this network require both public and private DNS to resolve cluster endpoints.
	// When resolution is PRIVATE, clusters in this network only require private DNS to resolve cluster endpoints.
	// Network DNS resolution.
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`
}

type DNSConfigObservation struct {

	// Network DNS resolution.
	// When resolution is CHASED_PRIVATE, clusters in this network require both public and private DNS to resolve cluster endpoints.
	// When resolution is PRIVATE, clusters in this network only require private DNS to resolve cluster endpoints.
	// Network DNS resolution.
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`
}

type DNSConfigParameters struct {

	// Network DNS resolution.
	// When resolution is CHASED_PRIVATE, clusters in this network require both public and private DNS to resolve cluster endpoints.
	// When resolution is PRIVATE, clusters in this network only require private DNS to resolve cluster endpoints.
	// Network DNS resolution.
	// +kubebuilder:validation:Optional
	Resolution *string `json:"resolution" tf:"resolution,omitempty"`
}

type GCPInitParameters struct {
}

type GCPObservation struct {

	// The mapping of zones to Private Service Connect Service Attachments if available. Keys are zones and values are GCP Private Service Connect service attachment.
	// The mapping of zones to Private Service Connect service attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).
	PrivateServiceConnectServiceAttachments map[string]*string `json:"privateServiceConnectServiceAttachments,omitempty" tf:"private_service_connect_service_attachments,omitempty"`

	// The GCP Project ID associated with the Confluent Cloud VPC.
	// The GCP project.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The network name of the Confluent Cloud VPC.
	// The GCP VPC network name.
	VPCNetwork *string `json:"vpcNetwork,omitempty" tf:"vpc_network,omitempty"`
}

type GCPParameters struct {
}

type NetworkEnvironmentInitParameters struct {
}

type NetworkEnvironmentObservation struct {

	// The ID of the Environment that the Network belongs to, for example, env-abc123.
	// The unique identifier for the environment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkEnvironmentParameters struct {

	// The ID of the Environment that the Network belongs to, for example, env-abc123.
	// The unique identifier for the environment.
	// +crossplane:generate:reference:type=github.com/stakater/provider-confluent/apis/confluent/v1alpha1.Environment
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Environment in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Environment in confluent to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type NetworkInitParameters_2 struct {

	// The AWS-specific network details if available. It supports the following:
	Aws []AwsInitParameters `json:"aws,omitempty" tf:"aws,omitempty"`

	// The Azure-specific network details if available. It supports the following:
	Azure []AzureInitParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// The IPv4 CIDR block to be used for the network. Must be /16. Required for VPC peering and AWS TransitGateway.
	// The IPv4 CIDR block to used for this network. Must be /16. Required for VPC peering and AWS TransitGateway.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// The cloud service provider in which the network exists. Accepted values are: AWS, AZURE, and GCP.
	// The cloud service provider in which the network exists.
	Cloud *string `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// The list of connection types that may be used with the network. Accepted connection types are: PEERING, TRANSITGATEWAY, and PRIVATELINK.
	ConnectionTypes []*string `json:"connectionTypes,omitempty" tf:"connection_types,omitempty"`

	// Network DNS config. It applies only to the PRIVATELINK network connection type. When omitted, resolution defaults to CHASED_PRIVATE. It supports the following:
	// Network DNS config. It applies only to the PRIVATELINK network connection type.
	DNSConfig []DNSConfigInitParameters `json:"dnsConfig,omitempty" tf:"dns_config,omitempty"`

	// The name of the Network.
	// The name of the Network.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment []NetworkEnvironmentInitParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// The GCP-specific network details if available. It supports the following:
	GCP []GCPInitParameters `json:"gcp,omitempty" tf:"gcp,omitempty"`

	// The cloud provider region where the network exists.
	// The cloud service provider region where the network exists.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The reserved IPv4 CIDR block to be used for the network. Must be /24. If not specified, Confluent Cloud Network uses 172.20.255.0/24.
	// The IPv4 CIDR block reserved for Confluent Cloud Network. Must be /24. If not specified, Confluent Cloud Network uses 172.20.255.0/24
	ReservedCidr *string `json:"reservedCidr,omitempty" tf:"reserved_cidr,omitempty"`

	// Each item represents information related to a single zone. It supports the following:
	// Each item represents information related to a single zone.
	ZoneInfo []ZoneInfoInitParameters `json:"zoneInfo,omitempty" tf:"zone_info,omitempty"`

	// The 3 availability zones for this network. They can optionally be specified for AWS networks
	// used with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP
	// networks used with Peering. Otherwise, they are automatically chosen by Confluent Cloud.
	// On AWS, zones are AWS AZ IDs, for example, use1-az3.
	// On GCP, zones are GCP zones, for example, us-central1-c.
	// On Azure, zones are Confluent-chosen names (for example, 1, 2, 3) since Azure does not have universal zone identifiers.
	// The 3 availability zones for this network. They can optionally be specified for only AWS networks used with PrivateLink. Otherwise, they are automatically chosen by Confluent Cloud.
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

type NetworkObservation_2 struct {

	// The AWS-specific network details if available. It supports the following:
	Aws []AwsObservation `json:"aws,omitempty" tf:"aws,omitempty"`

	// The Azure-specific network details if available. It supports the following:
	Azure []AzureObservation `json:"azure,omitempty" tf:"azure,omitempty"`

	// The IPv4 CIDR block to be used for the network. Must be /16. Required for VPC peering and AWS TransitGateway.
	// The IPv4 CIDR block to used for this network. Must be /16. Required for VPC peering and AWS TransitGateway.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// The cloud service provider in which the network exists. Accepted values are: AWS, AZURE, and GCP.
	// The cloud service provider in which the network exists.
	Cloud *string `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// The list of connection types that may be used with the network. Accepted connection types are: PEERING, TRANSITGATEWAY, and PRIVATELINK.
	ConnectionTypes []*string `json:"connectionTypes,omitempty" tf:"connection_types,omitempty"`

	// Network DNS config. It applies only to the PRIVATELINK network connection type. When omitted, resolution defaults to CHASED_PRIVATE. It supports the following:
	// Network DNS config. It applies only to the PRIVATELINK network connection type.
	DNSConfig []DNSConfigObservation `json:"dnsConfig,omitempty" tf:"dns_config,omitempty"`

	// The root DNS domain for the network, for example, pr123a.us-east-2.aws.confluent.cloud if applicable. Present on Networks that support Private Link.
	// The root DNS domain for the network if applicable. Present on networks that support PrivateLink.
	DNSDomain *string `json:"dnsDomain,omitempty" tf:"dns_domain,omitempty"`

	// The name of the Network.
	// The name of the Network.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment []NetworkEnvironmentObservation `json:"environment,omitempty" tf:"environment,omitempty"`

	// The GCP-specific network details if available. It supports the following:
	GCP []GCPObservation `json:"gcp,omitempty" tf:"gcp,omitempty"`

	// The ID of the Network, for example, n-abc123.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The cloud provider region where the network exists.
	// The cloud service provider region where the network exists.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The reserved IPv4 CIDR block to be used for the network. Must be /24. If not specified, Confluent Cloud Network uses 172.20.255.0/24.
	// The IPv4 CIDR block reserved for Confluent Cloud Network. Must be /24. If not specified, Confluent Cloud Network uses 172.20.255.0/24
	ReservedCidr *string `json:"reservedCidr,omitempty" tf:"reserved_cidr,omitempty"`

	// The Confluent Resource Name of the Network.
	// The Confluent Resource Name of the Network.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// The DNS subdomain for each zone. Present on networks that support Private Link. Keys are zone names, for example, use2-az1 and values are DNS domains, for example, use2-az1.pr123a.us-east-2.aws.confluent.cloud.
	// The DNS subdomain for each zone. Present on networks that support PrivateLink. Keys are zones and values are DNS domains.
	ZonalSubdomains map[string]*string `json:"zonalSubdomains,omitempty" tf:"zonal_subdomains,omitempty"`

	// Each item represents information related to a single zone. It supports the following:
	// Each item represents information related to a single zone.
	ZoneInfo []ZoneInfoObservation `json:"zoneInfo,omitempty" tf:"zone_info,omitempty"`

	// The 3 availability zones for this network. They can optionally be specified for AWS networks
	// used with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP
	// networks used with Peering. Otherwise, they are automatically chosen by Confluent Cloud.
	// On AWS, zones are AWS AZ IDs, for example, use1-az3.
	// On GCP, zones are GCP zones, for example, us-central1-c.
	// On Azure, zones are Confluent-chosen names (for example, 1, 2, 3) since Azure does not have universal zone identifiers.
	// The 3 availability zones for this network. They can optionally be specified for only AWS networks used with PrivateLink. Otherwise, they are automatically chosen by Confluent Cloud.
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

type NetworkParameters_2 struct {

	// The AWS-specific network details if available. It supports the following:
	// +kubebuilder:validation:Optional
	Aws []AwsParameters `json:"aws,omitempty" tf:"aws,omitempty"`

	// The Azure-specific network details if available. It supports the following:
	// +kubebuilder:validation:Optional
	Azure []AzureParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// The IPv4 CIDR block to be used for the network. Must be /16. Required for VPC peering and AWS TransitGateway.
	// The IPv4 CIDR block to used for this network. Must be /16. Required for VPC peering and AWS TransitGateway.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// The cloud service provider in which the network exists. Accepted values are: AWS, AZURE, and GCP.
	// The cloud service provider in which the network exists.
	// +kubebuilder:validation:Optional
	Cloud *string `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// The list of connection types that may be used with the network. Accepted connection types are: PEERING, TRANSITGATEWAY, and PRIVATELINK.
	// +kubebuilder:validation:Optional
	ConnectionTypes []*string `json:"connectionTypes,omitempty" tf:"connection_types,omitempty"`

	// Network DNS config. It applies only to the PRIVATELINK network connection type. When omitted, resolution defaults to CHASED_PRIVATE. It supports the following:
	// Network DNS config. It applies only to the PRIVATELINK network connection type.
	// +kubebuilder:validation:Optional
	DNSConfig []DNSConfigParameters `json:"dnsConfig,omitempty" tf:"dns_config,omitempty"`

	// The name of the Network.
	// The name of the Network.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	// +kubebuilder:validation:Optional
	Environment []NetworkEnvironmentParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// The GCP-specific network details if available. It supports the following:
	// +kubebuilder:validation:Optional
	GCP []GCPParameters `json:"gcp,omitempty" tf:"gcp,omitempty"`

	// The cloud provider region where the network exists.
	// The cloud service provider region where the network exists.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The reserved IPv4 CIDR block to be used for the network. Must be /24. If not specified, Confluent Cloud Network uses 172.20.255.0/24.
	// The IPv4 CIDR block reserved for Confluent Cloud Network. Must be /24. If not specified, Confluent Cloud Network uses 172.20.255.0/24
	// +kubebuilder:validation:Optional
	ReservedCidr *string `json:"reservedCidr,omitempty" tf:"reserved_cidr,omitempty"`

	// Each item represents information related to a single zone. It supports the following:
	// Each item represents information related to a single zone.
	// +kubebuilder:validation:Optional
	ZoneInfo []ZoneInfoParameters `json:"zoneInfo,omitempty" tf:"zone_info,omitempty"`

	// The 3 availability zones for this network. They can optionally be specified for AWS networks
	// used with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP
	// networks used with Peering. Otherwise, they are automatically chosen by Confluent Cloud.
	// On AWS, zones are AWS AZ IDs, for example, use1-az3.
	// On GCP, zones are GCP zones, for example, us-central1-c.
	// On Azure, zones are Confluent-chosen names (for example, 1, 2, 3) since Azure does not have universal zone identifiers.
	// The 3 availability zones for this network. They can optionally be specified for only AWS networks used with PrivateLink. Otherwise, they are automatically chosen by Confluent Cloud.
	// +kubebuilder:validation:Optional
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

type ZoneInfoInitParameters struct {

	// The IPv4 CIDR block to be used for the network. Must be /16. Required for VPC peering and AWS TransitGateway.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Cloud provider zone ID.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ZoneInfoObservation struct {

	// The IPv4 CIDR block to be used for the network. Must be /16. Required for VPC peering and AWS TransitGateway.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Cloud provider zone ID.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ZoneInfoParameters struct {

	// The IPv4 CIDR block to be used for the network. Must be /16. Required for VPC peering and AWS TransitGateway.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Cloud provider zone ID.
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// NetworkSpec defines the desired state of Network
type NetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInitParameters_2 `json:"initProvider,omitempty"`
}

// NetworkStatus defines the observed state of Network.
type NetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Network is the Schema for the Networks API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,confluent}
type Network struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloud) || (has(self.initProvider) && has(self.initProvider.cloud))",message="spec.forProvider.cloud is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectionTypes) || (has(self.initProvider) && has(self.initProvider.connectionTypes))",message="spec.forProvider.connectionTypes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environment) || (has(self.initProvider) && has(self.initProvider.environment))",message="spec.forProvider.environment is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   NetworkSpec   `json:"spec"`
	Status NetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkList contains a list of Networks
type NetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Network `json:"items"`
}

// Repository type metadata.
var (
	Network_Kind             = "Network"
	Network_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Network_Kind}.String()
	Network_KindAPIVersion   = Network_Kind + "." + CRDGroupVersion.String()
	Network_GroupVersionKind = CRDGroupVersion.WithKind(Network_Kind)
)

func init() {
	SchemeBuilder.Register(&Network{}, &NetworkList{})
}
